function init()
{
  frontol.addEventListener("closeDocument", "BeforeCloseDoc", true)

  if (typeof JSON !== "object") {
    JSON = {};
  }

  (function () {
    "use strict";

    var rx_one = /^[\],:{}\s]*$/;
    var rx_two = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
    var rx_three = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
    var rx_four = /(?:^|:|,)(?:\s*\[)+/g;
    var rx_escapable = /[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    var rx_dangerous = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10
            ? "0" + n
            : n;
    }

    function this_value() {
        return this.valueOf();
    }

    if (typeof Date.prototype.toJSON !== "function") {

        Date.prototype.toJSON = function () {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear() + "-" +
                        f(this.getUTCMonth() + 1) + "-" +
                        f(this.getUTCDate()) + "T" +
                        f(this.getUTCHours()) + ":" +
                        f(this.getUTCMinutes()) + ":" +
                        f(this.getUTCSeconds()) + "Z"
                : null;
        };

        Boolean.prototype.toJSON = this_value;
        Number.prototype.toJSON = this_value;
        String.prototype.toJSON = this_value;
    }

    var gap;
    var indent;
    var meta;
    var rep;


    function quote(string) {

        rx_escapable.lastIndex = 0;
        return rx_escapable.test(string)
            ? "\"" + string.replace(rx_escapable, function (a) {
                var c = meta[a];
                return typeof c === "string"
                    ? c
                    : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
            }) + "\""
            : "\"" + string + "\"";
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i;          // The loop counter.
        var k;          // The member key.
        var v;          // The member value.
        var length;
        var mind = gap;
        var partial;
        var value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === "object" &&
                typeof value.toJSON === "function") {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === "function") {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case "string":
            return quote(value);

        case "number":

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value)
                ? String(value)
                : "null";

        case "boolean":
        case "null":

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce "null". The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is "object", we might be dealing with an object or an array or
// null.

        case "object":

// Due to a specification blunder in ECMAScript, typeof null is "object",
// so watch out for that case.

            if (!value) {
                return "null";
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === "[object Array]") {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || "null";
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? "[]"
                    : gap
                        ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]"
                        : "[" + partial.join(",") + "]";
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === "object") {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === "string") {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (
                                gap
                                    ? ": "
                                    : ":"
                            ) + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (
                                gap
                                    ? ": "
                                    : ":"
                            ) + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? "{}"
                : gap
                    ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
                    : "{" + partial.join(",") + "}";
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== "function") {
        meta = {    // table of character substitutions
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            "\"": "\\\"",
            "\\": "\\\\"
        };
        JSON.stringify = function (value, replacer, space) {

            var i;
            gap = "";
            indent = "";

            if (typeof space === "number") {
                for (i = 0; i < space; i += 1) {
                    indent += " ";
                }

            } else if (typeof space === "string") {
                indent = space;
            }

            rep = replacer;
            if (replacer && typeof replacer !== "function" &&
                    (typeof replacer !== "object" ||
                    typeof replacer.length !== "number")) {
                throw new Error("JSON.stringify");
            }

            return str("", {"": value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== "function") {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k;
                var v;
                var value = holder[key];
                if (value && typeof value === "object") {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            rx_dangerous.lastIndex = 0;
            if (rx_dangerous.test(text)) {
                text = text.replace(rx_dangerous, function (a) {
                    return "\\u" +
                            ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

            if (
                rx_one.test(
                    text
                        .replace(rx_two, "@")
                        .replace(rx_three, "]")
                        .replace(rx_four, "")
                )
            ) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The "{" operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval("(" + text + ")");

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return (typeof reviver === "function")
                    ? walk({"": j}, "")
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError("JSON.parse");
        };
    }
}());

}

//#USER
function GetHttpAdress()
{
   return "http://udsgame.com/v1/partner"
}

function GetApiKey()
{
    return ""
}

//#METHODS
function S4()
{
    return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
}

function GetGUID()
{
    return (S4() + S4() + "-" + S4() + "-4" + S4().substr(0,3) + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase()
}

function GetTimeStamp()
{
   return new Date()
}

function GetCustomerInfo()
{
    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP")

    try
    {
        xmlhttp.open("GET", GetHttpAdress()+"/customer?code="+PromoCode, false)
    }
    catch (E)
    {
        return null;
    }

    xmlhttp.setRequestHeader("Accept", "application/json")
    xmlhttp.setRequestHeader("X-Origin-Request-Id", GetGUID())
    xmlhttp.setRequestHeader("X-Api-Key", GetApiKey())
    xmlhttp.setRequestHeader("X-Timestamp", GetTimeStamp())

    xmlhttp.send(null)

    if(xmlhttp.status!=200)
    {
       return null
    }

    return xmlhttp.responseText
}

function GetCompany()
{
 xmlhttp = new ActiveXObject("Microsoft.XMLHTTP")

    try
    {
        xmlhttp.open("GET", GetHttpAdress()+"/company", false)
    }
    catch (E)
    {
        return null
    }


    xmlhttp.setRequestHeader("Accept", "application/json")
    xmlhttp.setRequestHeader("X-Origin-Request-Id", GetGUID())
    xmlhttp.setRequestHeader("X-Api-Key", GetApiKey())
    xmlhttp.setRequestHeader("X-Timestamp", GetTimeStamp())

    xmlhttp.send(null)

    if(xmlhttp.status!=200)
    {
       return null
    }

    return xmlhttp.responseText
}

function GetTextMessage(CustomerInfo, MaxAvailableSumm)
{
   return CustomerInfo.name+" "+CustomerInfo.surname+" ( "+ CustomerBonus+"Б )"+"\n"+"\n"+
          "К оплате "+frontol.currentDocument.sum+"\n"+
          "Доступно "+MaxAvailableSumm+"\n"+
          "Списание "
}

//#API
function CalcDiscUDSGame()
{
    PromoCode =  frontol.actions.inputString("        Промокод UDS Game:         ","",6)
    if (PromoCode==null)
    {
        return 0
    }
    else if (PromoCode=="")
    {
       frontol.actions.showMessage("Промокод пустой", Icon.Error)
        return 0
    }

    CompanyReq = GetCompany()
    if (CompanyReq==null)
    {
        frontol.actions.showMessage("Нет связи с сервером UDS Game", Icon.Error)
        return 0
    }
    Company = JSON.parse(CompanyReq)

    MaxScoresDiscount = Company.marketingSettings.maxScoresDiscount

    CustomerInfoReq = GetCustomerInfo()
    if (CustomerInfoReq==null)
    {
        frontol.actions.showMessage("Промокод: "+PromoCode+" не найден на сервере UDS Game", Icon.Error)
        return 0
    }
    CustomerInfo = JSON.parse(CustomerInfoReq)

    CustomerBonus = CustomerInfo.scores

    MaxAvailableSumm = Math.floor(frontol.currentDocument.sum*MaxScoresDiscount/100)
    if (MaxAvailableSumm>CustomerBonus)
    {
        MaxAvailableSumm = CustomerBonus
    }

    TextMessage = GetTextMessage(CustomerInfo, MaxAvailableSumm)

    SummBonus = 0

    SummBonusNotCorrect = true
    while (SummBonusNotCorrect)
    {

      SummBonus = frontol.actions.inputString(TextMessage, "", 6)
      if (SummBonus==null)
      {
        return 0
      }

      SummBonusNotCorrect = (SummBonus=="" || isNaN(SummBonus) || 0>SummBonus)
      if (SummBonusNotCorrect)
      {
        frontol.actions.showMessage("Сумма баллов UDS Game к списанию не верна ", Icon.Error)
      }
      else if (SummBonus>MaxAvailableSumm)
      {
        frontol.actions.showMessage("Сумма баллов UDS Game превышает допустимое значение", Icon.Error)
        SummBonusNotCorrect = true
      }
    }

    //frontol.actions.showMessage(SummBonus, Icon.Error)

    frontol.currentDocument.userValues.set("PromoCode", PromoCode)
    frontol.currentDocument.userValues.set("SummBonus", SummBonus)
    frontol.currentDocument.userValues.set("CustomerInfo", CustomerInfoReq)

    //frontol.actions.showMessage(SummBonus, Icon.Error)

    return SummBonus
}

function BeforeCloseDoc()
{
   PromoCode = frontol.currentDocument.userValues.get("PromoCode")
   if(PromoCode==null)
   {
      return
   }
   if(PromoCode==0)
   {
      return
   }
   if(isNaN(PromoCode))
   {
       frontol.actions.showMessage("Ошибка списания баллов UDS Game.Промо код не корректен", Icon.Error)
       return
       //AO.Cancel()
   }

   SummBonus = frontol.currentDocument.userValues.get("SummBonus")
   if(SummBonus==null)
   {
      return
   }
   //if(0>=SummBonus || isNaN(SummBonus))
   //{
   //    AO.ShowMessage("Ошибка списания баллов UDS Game.Сумма бонусов не корректна", Icon.Error)
   //    AO.Cancel()
  // }

   SummDoc = frontol.currentDocument.sum
   SummCash = SummDoc - SummBonus

   xmlhttp = new ActiveXObject("Microsoft.XMLHTTP")

   TextPost= "total="+SummDoc+"&cash="+SummCash+"+&scores="+SummBonus+"&code="+PromoCode

   try
   {
       xmlhttp.open("POST", GetHttpAdress()+"/purchase?"+TextPost, false)
   }
   catch (E)
   {
       frontol.actions.showMessage("Ошибка списания баллов.Сервер UDS Game не доступен", Icon.Error)
       //AO.Cancel()
       return
   }

   xmlhttp.setRequestHeader("X-Api-Key", GetApiKey())

   xmlhttp.send();

   if(xmlhttp.status!=200)
   {
     frontol.actions.showMessage("Ошибка списания бонусов.Сервер UDS Game не списал бонусы", Icon.Error)
      //AO.Cancel()
      return
   }

   frontol.currentDocument.userValues.set("{OperationInfo", xmlhttp.responseText+"};")
   frontol.currentDocument.userValues.set("{DateClose",  frontol.currentDocument.dateClose+"};")
   frontol.currentDocument.userValues.set("{ReceiptNo",  frontol.currentDocument.number+"};")
}


